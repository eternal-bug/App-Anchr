[% INCLUDE header.tt2 %]

printf "| %s | %s | %s | %s |\n" \
    "Name" "N50" "Sum" "#" \
    > statReads.md
printf "|:--|--:|--:|--:|\n" >> statReads.md

if [ -e 1_genome/genome.fa ]; then
    printf "| %s | %s | %s | %s |\n" \
        $(echo "Genome";   faops n50 -H -S -C 1_genome/genome.fa;) >> statReads.md
fi
if [ -e 1_genome/paralogs.fas ]; then
    printf "| %s | %s | %s | %s |\n" \
        $(echo "Paralogs"; faops n50 -H -S -C 1_genome/paralogs.fas;) >> statReads.md
fi

if [ -e 2_illumina/R1.fq.gz ]; then
    printf "| %s | %s | %s | %s |\n" \
        $(echo "Illumina"; stat_format 2_illumina/R1.fq.gz [% IF not opt.se %]2_illumina/R2.fq.gz[% END %];) >> statReads.md
fi
if [ -e 2_illumina/R1.uniq.fq.gz ]; then
    printf "| %s | %s | %s | %s |\n" \
        $(echo "uniq";    stat_format 2_illumina/R1.uniq.fq.gz [% IF not opt.se %]2_illumina/R2.uniq.fq.gz[% END %];) >> statReads.md
fi
if [ -e 2_illumina/R1.shuffle.fq.gz ]; then
    printf "| %s | %s | %s | %s |\n" \
        $(echo "shuffle"; stat_format 2_illumina/R1.shuffle.fq.gz [% IF not opt.se %]2_illumina/R2.shuffle.fq.gz[% END %];) >> statReads.md
fi
if [ -e 2_illumina/R1.sample.fq.gz ]; then
    printf "| %s | %s | %s | %s |\n" \
        $(echo "sample";  stat_format 2_illumina/R1.sample.fq.gz [% IF not opt.se %]2_illumina/R2.sample.fq.gz[% END %];) >> statReads.md
fi
if [ -e 2_illumina/R1.scythe.fq.gz ]; then
    printf "| %s | %s | %s | %s |\n" \
        $(echo "scythe";  stat_format 2_illumina/R1.scythe.fq.gz [% IF not opt.se %]2_illumina/R2.scythe.fq.gz[% END %];) >> statReads.md
fi

parallel --no-run-if-empty -k -j 2 "
    stat_format () {
        echo \$(faops n50 -H -N 50 -S -C \$@) \
            | perl -nla -MNumber::Format -e '
                printf qq{%d\t%s\t%d\n}, \$F[0], Number::Format::format_bytes(\$F[1], base => 1000,), \$F[2];
            '
    }

    if [ ! -e 2_illumina/Q{1}L{2}/R1.sickle.fq.gz ]; then
        exit;
    fi

    printf \"| %s | %s | %s | %s |\n\" \
        \$(
            echo Q{1}L{2};
[% IF not opt.se %]
            if [[ {1} -ge '30' ]]; then
                stat_format \
                    2_illumina/Q{1}L{2}/R1.sickle.fq.gz \
                    2_illumina/Q{1}L{2}/R2.sickle.fq.gz \
                    2_illumina/Q{1}L{2}/Rs.sickle.fq.gz;
            else
                stat_format \
                    2_illumina/Q{1}L{2}/R1.sickle.fq.gz \
                    2_illumina/Q{1}L{2}/R2.sickle.fq.gz;
            fi
[% ELSE %]
            stat_format \
                2_illumina/Q{1}L{2}/R1.sickle.fq.gz;
[% END %]
        )
    " ::: [% opt.qual2 %] ::: [% opt.len2 %] \
    >> statReads.md

if [ -e 3_pacbio/pacbio.fasta ]; then
    printf "| %s | %s | %s | %s |\n" \
        $(echo "PacBio"; stat_format 3_pacbio/pacbio.fasta;) >> statReads.md
fi

parallel --no-run-if-empty -k -j 2 "
    stat_format () {
        echo \$(faops n50 -H -N 50 -S -C \$@) \
            | perl -nla -MNumber::Format -e '
                printf qq{%d\t%s\t%d\n}, \$F[0], Number::Format::format_bytes(\$F[1], base => 1000,), \$F[2];
            '
    }

    if [ ! -e 3_pacbio/pacbio.X{1}.{2}.fasta ]; then
        exit;
    fi

    printf \"| %s | %s | %s | %s |\n\" \
        \$(
            echo X{1}.{2};
            stat_format \
                3_pacbio/pacbio.X{1}.{2}.fasta;
        )
    " ::: [% opt.coverage3 %] ::: raw trim \
    >> statReads.md

cat statReads.md
