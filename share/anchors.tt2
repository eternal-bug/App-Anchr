[% INCLUDE header.tt2 %]

#----------------------------#
# Prepare SR
#----------------------------#
log_info Symlink/copy input files

if [ ! -e SR.fasta ]; then
    ln -s [% args.0 %] SR.fasta
fi

if [ ! -e pe.cor.fa ]; then
    ln -s [% args.1 %] pe.cor.fa
fi

log_debug "SR sizes"
faops size SR.fasta > sr.chr.sizes

#----------------------------#
# Mapping reads
#----------------------------#
log_info "Mapping reads"

log_debug "bbmap"
bbmap.sh \
    maxindel=0 strictmaxindel perfectmode \
    threads=[% opt.parallel %] \
    ambiguous=all \
    nodisk \
    ref=SR.fasta in=pe.cor.fa \
    outm=mapped.sam outu=unmapped.sam \
    basecov=basecov.txt \
    1>bbmap.err 2>&1

#----------------------------#
# basecov
#----------------------------#
log_info "basecov"
cat basecov.txt \
    | grep -v '^#' \
    | perl -nla -MApp::Fasops::Common -e '
        BEGIN { our $name; our @list; }

        if ( !defined $name ) {
            $name = $F[0];
            @list = ( $F[2] );
        }
        elsif ( $name eq $F[0] ) {
            push @list, $F[2];
        }
        else {
            my $mean_cov = App::Fasops::Common::mean(@list);
            printf qq{%s\t%d\n}, $name, int $mean_cov;

            $name = $F[0];
            @list = ( $F[2] );
        }

        END {
            my $mean_cov = App::Fasops::Common::mean(@list);
            printf qq{%s\t%d\n}, $name, int $mean_cov;
        }
    ' \
    > reads.coverage.tsv

# How to best eliminate values in a list that are outliers
# http://www.perlmonks.org/?node_id=1147296
# http://exploringdatablog.blogspot.com/2013/02/finding-outliers-in-numerical-data.html
cat reads.coverage.tsv \
    | perl -nla -MStatistics::Descriptive -MJSON -e '
        BEGIN {
            our $stat   = Statistics::Descriptive::Full->new();
            our %cov_of = ();
        }

        $cov_of{ $F[0] } = $F[1];
        $stat->add_data( $F[1] );

        END {
            my $median       = $stat->median();
            my @abs_res      = map { abs( $median - $_ ) } $stat->get_data();
            my $abs_res_stat = Statistics::Descriptive::Full->new();
            $abs_res_stat->add_data(@abs_res);
            my $MAD = $abs_res_stat->median();
            my $k   = [% opt.scale %];   # the scale factor

            my $lower = ( $median - $k * $MAD ) / 3;
            $lower = [% opt.reads %] if $lower < [% opt.reads %];
            my $upper = ( $median + $k * $MAD ) * 1.5;
            $upper = $median * 2 if $upper > $median * 2;

            my $limit = {
                median => $median,
                MAD => $MAD,
                k => $k,
                lower => $lower,
                upper => $upper,
            };

            print JSON->new->encode($limit);
        }
    ' \
    | jq "." > environment.json

MAPPED_RATIO=$( 
    perl -e '
        my $mapped = -s q{mapped.sam};
        my $unmapped = -s q{unmapped.sam};
        print $mapped / ($mapped + $unmapped);
        ' 
)
save MAPPED_RATIO

#----------------------------#
# Properly covered regions by reads
#----------------------------#
# at least [% opt.reads %] reads covered
# Pos is 0-based
#RefName	Pos	Coverage
log_debug "covered"
cat basecov.txt \
    | grep -v '^#' \
    | perl -nla -MPath::Tiny -MJSON -e '
        BEGIN {
            our $name;
            our @list;
            our $limit = JSON->new->decode(
                Path::Tiny::path( q{environment.json} )->slurp
            );
        }

        sub list_to_ranges {
            my @ranges;
            my $count = scalar @list;
            my $pos   = 0;
            while ( $pos < $count ) {
                my $end = $pos + 1;
                $end++ while $end < $count && $list[$end] <= $list[ $end - 1 ] + 1;
                push @ranges, ( $list[$pos], $list[ $end - 1 ] );
                $pos = $end;
            }

            return @ranges;
        }

        if ( $F[2] < $limit->{lower} or $F[2] > $limit->{upper} ) {
            next;
        }

        if ( !defined $name ) {
            $name = $F[0];
            @list = ( $F[1] );
        }
        elsif ( $name eq $F[0] ) {
            push @list, $F[1];
        }
        else {
            my @ranges = list_to_ranges();
            for ( my $i = 0; $i < $#ranges; $i += 2 ) {
                if ( $ranges[$i] == $ranges[ $i + 1 ] ) {
                    printf qq{%s:%s\n}, $name, $ranges[$i] + 1;
                }
                else {
                    printf qq{%s:%s-%s\n}, $name, $ranges[$i] + 1, $ranges[ $i + 1 ] + 1;
                }
            }

            $name = $F[0];
            @list = ( $F[1] );
        }

        END {
            my @ranges = list_to_ranges();
            for ( my $i = 0; $i < $#ranges; $i += 2 ) {
                if ( $ranges[$i] == $ranges[ $i + 1 ] ) {
                    printf qq{%s:%s\n}, $name, $ranges[$i] + 1;
                }
                else {
                    printf qq{%s:%s-%s\n}, $name, $ranges[$i] + 1, $ranges[ $i + 1 ] + 1;
                }
            }
        }
    ' \
    > contig.covered.txt

#----------------------------#
# anchor
#----------------------------#
log_info "anchor - proper covered regions"

OPT_FILL=[% opt.fill %]
OPT_MIN=[% opt.min %]
save OPT_FILL
save OPT_MIN

# covered region
jrunlist cover contig.covered.txt -o contig.covered.yml
jrunlist stat sr.chr.sizes contig.covered.yml -o contig.covered.csv

# repeats on the edge hurt assembling mostly, so just fill holes

# fill all holes of 95% covered contigs
cat contig.covered.csv \
    | perl -nla -F"," -e '
        $F[0] eq q{chr} and next;
        $F[0] eq q{all} and next;
        $F[2] < [% opt.min %] and next;
        $F[3] < [% opt.ratio %] and next;
        print $F[0];
    ' \
    | sort -n \
    > fill_all.txt

jrunlist some contig.covered.yml fill_all.txt -o contig.fill_all.yml
jrunlist span contig.fill_all.yml --op fill -n [% opt.fill * 10 %] -o contig.fill_all.1.yml
jrunlist span contig.fill_all.1.yml --op excise -n [% opt.min %] -o contig.fill_all.2.yml

# fill small holes
cat sr.chr.sizes \
    | cut -f 1 \
    | grep -Fx -f fill_all.txt -v \
    > fill_hole.txt

jrunlist some contig.covered.yml fill_hole.txt -o contig.fill_hole.yml
jrunlist span contig.fill_hole.yml --op fill -n [% opt.fill %] -o contig.fill_hole.1.yml
jrunlist span contig.fill_hole.1.yml --op excise -n [% opt.min %] -o contig.fill_hole.2.yml

# get proper regions
perl -MYAML::Syck -MAlignDB::IntSpan -e '
    my $yml1 = YAML::Syck::LoadFile( q{contig.fill_all.2.yml} );
    my $yml2 = YAML::Syck::LoadFile( q{contig.fill_hole.2.yml} );

    my $yml = {};

    for my $key ( sort keys $yml1 ) {
        $yml->{$key} = $yml1->{$key};
    }
    for my $key ( sort keys $yml2 ) {
        $yml->{$key} = $yml2->{$key};
    }

    YAML::Syck::DumpFile( q{contig.proper.yml}, $yml );
    '
jrunlist stat sr.chr.sizes contig.proper.yml -o contig.proper.csv

[% IF opt.longest -%]
perl -MYAML::Syck -MAlignDB::IntSpan -e '
    my $yml = YAML::Syck::LoadFile( q{contig.proper.yml} );

    for my $key ( sort keys $yml ) {
        my $runlist = $yml->{$key};
        my $intspan = AlignDB::IntSpan->new($runlist);
        my @sets = sort { $b->size <=> $a->size } $intspan->sets;
        printf "%s:%s\n", $key, $sets[0]->runlist;
    }
    ' \
    > longest.regions.txt

jrunlist cover longest.regions.txt -o anchor.yml
[% ELSE %]
perl -MYAML::Syck -MAlignDB::IntSpan -e '
    my $yml = YAML::Syck::LoadFile( q{contig.proper.yml} );

    for my $key ( sort keys $yml ) {
        my $runlist = $yml->{$key};
        printf "%s:%s\n", $key, $runlist;
    }
    ' \
    > anchor.regions.txt

ln -s contig.proper.yml anchor.yml
[% END -%]

#----------------------------#
# others
#----------------------------#
jrunlist genome sr.chr.sizes -o sr.chr.yml
jrunlist compare sr.chr.yml anchor.yml --op diff -o others.yml

perl -MYAML::Syck -MAlignDB::IntSpan -e '
    my $yml = YAML::Syck::LoadFile( q{others.yml} );

    for my $key ( sort keys $yml ) {
        my $runlist = $yml->{$key};
        printf "%s:%s\n", $key, $runlist;
    }
    ' \
    > others.regions.txt

#----------------------------#
# Split SR.fasta to anchor and others
#----------------------------#
log_info "pe.anchor.fa & pe.others.fa"

faops region -l 0 SR.fasta anchor.regions.txt pe.anchor.fa
faops region -l 0 SR.fasta others.regions.txt pe.others.fa

#----------------------------#
# Merging anchors
#----------------------------#
log_info "Merging anchors"
anchr contained \
    pe.anchor.fa \
    --len [% opt.min %] --idt 0.98 --proportion 0.99999 --parallel [% opt.parallel %] \
    -o anchor.non-contained.fasta
anchr orient \
    anchor.non-contained.fasta \
    --len [% opt.min %] --idt 0.98 --parallel [% opt.parallel %] \
    -o anchor.orient.fasta
anchr merge \
    anchor.orient.fasta --len [% opt.min %] --idt 0.999 --parallel [% opt.parallel %] \
    -o anchor.merge0.fasta
anchr contained \
    anchor.merge0.fasta \
    --len [% opt.min %] --idt 0.98 --proportion 0.99 --parallel [% opt.parallel %] \
    -o anchor.fasta

#----------------------------#
# Done.
#----------------------------#
rm mapped.sam
rm unmapped.sam
rm basecov.txt

touch anchor.success
log_info "Done."

exit 0
