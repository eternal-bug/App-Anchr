[% INCLUDE header.tt2 %]

#----------------------------#
# Run
#----------------------------#
rm -f temp.fq.gz;

#----------------------------#
# Pipeline
#----------------------------#
# from bbmap/bbmap/pipelines/assemblyPipeline.sh

# Reorder reads for speed of subsequent phases
log_info "clumpify"
clumpify.sh \
    in=[% args.0 %] \
[% IF args.1 -%]
    in2=[% args.1 %] \
[% END -%]
    out=clumped.fq.gz \
    threads=[% opt.parallel %][% IF opt.xmx %] -Xmx[% opt.xmx %][% END %] \
    dedupe dupesubs=0 \
    overwrite
[% IF args.2 -%]
log_info "clumpify SE"
clumpify.sh \
    in=[% args.2 %] \
    out=clumpeds.fq.gz \
    threads=[% opt.parallel %][% IF opt.xmx %] -Xmx[% opt.xmx %][% END %] \
    dedupe dupesubs=0 \
    overwrite
cat clumpeds.fq.gz >> clumped.fq.gz
rm clumpeds.fq.gz
[% END -%]
rm -f temp.fq.gz; ln -s clumped.fq.gz temp.fq.gz

[% FOREACH ecphase IN opt.ecphase -%]
log_info Error-correct phase [% ecphase %]

[% IF ecphase == 1 -%]
# Error-correct phase 1
# error-correct via overlap
bbmerge.sh \
    in=temp.fq.gz out=ecco.fq.gz \
    ihist=ihist.merge1.txt \
    threads=[% opt.parallel %][% IF opt.xmx %] -Xmx[% opt.xmx %][% END %] \
[% IF opt.prefilter -%]
    prefilter=[% opt.prefilter %]  \
[% END -%]
    ecco mix vstrict ordered overwrite
rm temp.fq.gz; ln -s ecco.fq.gz temp.fq.gz
[% END -%]

[% IF ecphase == 2 -%]
# Error-correct phase 2
clumpify.sh \
    in=temp.fq.gz out=eccc.fq.gz \
    threads=[% opt.parallel %][% IF opt.xmx %] -Xmx[% opt.xmx %][% END %] \
    passes=4 ecc unpair repair overwrite
rm temp.fq.gz; ln -s eccc.fq.gz temp.fq.gz
[% END -%]

[% IF ecphase == 3 -%]
# Error-correct phase 3
# Low-depth reads can be discarded here with the "tossjunk", "tossdepth", or "tossuncorrectable" flags.
# For large genomes, tadpole and bbmerge (during the "Merge" phase) may need the flag 
# "prefilter=1" or "prefilter=2" to avoid running out of memory.
# "prefilter" makes these take twice as long though so don't use it if you have enough memory.
tadpole.sh \
    in=temp.fq.gz out=ecct.fq.gz \
    threads=[% opt.parallel %][% IF opt.xmx %] -Xmx[% opt.xmx %][% END %] \
[% IF opt.prefilter -%]
    prefilter=[% opt.prefilter %]  \
[% END -%]
    ecc tossjunk tossdepth=2 tossuncorrectable ordered overwrite
rm temp.fq.gz; ln -s ecct.fq.gz temp.fq.gz
[% END -%]

[% END -%]

log_info "Read extension"
tadpole.sh \
    in=temp.fq.gz out=extended.fq.gz \
    threads=[% opt.parallel %][% IF opt.xmx %] -Xmx[% opt.xmx %][% END %] \
[% IF opt.prefilter -%]
    prefilter=[% opt.prefilter %]  \
[% END -%]
    ordered mode=extend el=20 er=20 k=62 overwrite
rm temp.fq.gz; ln -s extended.fq.gz temp.fq.gz

log_info "Read merging"
bbmerge-auto.sh \
    in=temp.fq.gz out=merged.raw.fq.gz outu=unmerged.raw.fq.gz \
    ihist=ihist.merge.txt \
    threads=[% opt.parallel %][% IF opt.xmx %] -Xmx[% opt.xmx %][% END %] \
[% IF opt.prefilter -%]
    prefilter=[% opt.prefilter %]  \
[% END -%]
    strict k=81 extend2=80 rem overwrite

log_info "Dedupe merged reads"
clumpify.sh \
    in=merged.raw.fq.gz \
    out=merged.fq.gz \
    threads=[% opt.parallel %][% IF opt.xmx %] -Xmx[% opt.xmx %][% END %] \
    dedupe dupesubs=0 \
    overwrite

[% IF args.2 -%]
log_info "Combine unmerged.raw with [% args.2 %]"
pigz -d -c unmerged.raw.fq.gz [% args.2 %] \
    > unmerged.raw.fq
rm unmerged.raw.fq.gz
pigz unmerged.raw.fq
[% END -%]

log_info "Quality-trim the unmerged reads"
bbduk.sh \
    in=unmerged.raw.fq.gz out=unmerged.trim.fq.gz \
    threads=[% opt.parallel %][% IF opt.xmx %] -Xmx[% opt.xmx %][% END %] \
    qtrim=r trimq=[% opt.qual %] minlen=[% opt.len %] overwrite

# Separates paired reads
repair.sh \
    in=unmerged.trim.fq.gz \
    out=U1.fq.gz \
    out2=U2.fq.gz \
    outs=Us.fq.gz \
    threads=[% opt.parallel %][% IF opt.xmx %] -Xmx[% opt.xmx %][% END %] \
    repair overwrite

#----------------------------#
# Done.
#----------------------------#
log_info Done.

exit 0
