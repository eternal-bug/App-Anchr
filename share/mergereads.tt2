[% INCLUDE header.tt2 %]

#----------------------------#
# Run
#----------------------------#

BBTOOLS_RESOURCES=$(brew --prefix)/Cellar/$(brew list --versions bbtools | sed 's/ /\//')/resources
rm temp.fq.gz;

# Reorder reads for speed of subsequent phases
# As we're going to precess reads from different sources, don't dedupe here.
# 1. dedupe, Remove duplicate reads.
# 2. optical, mark or remove optical duplicates only. Normal Illumina names needed.
clumpify.sh \
    in=[% args.0 %] \
[% IF args.1 -%]
    in2=[% args.1 %] \
[% END -%]
    out=clumped.fq.gz \
    threads=[% opt.parallel %] \
    dedupe \
    overwrite
rm temp.fq.gz; ln -s clumped.fq.gz temp.fq.gz

[% IF opt.tile -%]
# Remove low-quality reads by position
filterbytile.sh \
    in=temp.fq.gz out=filteredbytile.fq.gz \
    threads=[% opt.parallel %] \
    overwrite
rm temp.fq.gz; ln -s filteredbytile.fq.gz temp.fq.gz
[% END -%]

# Trim 5' adapters and discard reads with Ns
# Use bbduk.sh to quality and length trim the Illumina reads and remove adapter sequences
# 1. ftm = 5, right trim read length to a multiple of 5
# 2. k = 23, Kmer length used for finding contaminants
# 3. ktrim=r, Trim reads to remove bases matching reference kmers to the right
# 4. mink=7, look for shorter kmers at read tips down to 7 bps
# 5. hdist=1, hamming distance for query kmers
# 6. tbo, trim adapters based on where paired reads overlap
# 7. tpe, when kmer right-trimming, trim both reads to the minimum length of either
# 8. qtrim=r, trim read right ends to remove bases with low quality
# 9. trimq=15, regions with average quality below 15 will be trimmed.
# 10. minlen=60, reads shorter than 60 bps after trimming will be discarded.
bbduk.sh \
    in=temp.fq.gz \
    out=trimmed.fq.gz \
    ref=${BBTOOLS_RESOURCES}/adapters.fa \
    maxns=0 ktrim=r k=[% opt.trimk %] mink=7 hdist=1 tbo tpe \
    minlen=[% opt.len %] ftm=5 qtrim=r trimq=[% opt.trimq %] ordered overwrite
rm temp.fq.gz; ln -s trimmed.fq.gz temp.fq.gz

# Remove synthetic artifacts, spike-ins and 3' adapters by kmer-matching.
bbduk.sh \
    in=temp.fq.gz \
    out=filtered.fq.gz \
    ref=[% FOREACH filter IN opt.filter %][% IF filter == 'adapter' %]${BBTOOLS_RESOURCES}/adapters.fa,[% END %][% IF filter == 'phix' %]${BBTOOLS_RESOURCES}/phix174_ill.ref.fa.gz,[% END %][% IF filter == 'phix' %]${BBTOOLS_RESOURCES}/sequencing_artifacts.fa.gz,[% END %][% END %] \
    threads=[% opt.parallel %] \
    k=[% opt.matchk %] hdist=1 ordered overwrite \
    stats=filtering.stats.txt 
rm temp.fq.gz; ln -s filtered.fq.gz temp.fq.gz

[% FOREACH ecphase IN opt.ecphase -%]
log_debug Error-correct phase [% ecphase %]

[% IF ecphase == 1 -%]
# Error-correct phase 1
# error-correct via overlap
bbmerge.sh \
    in=temp.fq.gz out=ecco.fq.gz \
    ihist=ihist.merge1.txt \
    threads=[% opt.parallel %] \
[% IF opt.prefilter -%]
    prefilter=[% opt.prefilter %]  \
[% END -%]
    ecco mix vstrict ordered overwrite
rm temp.fq.gz; ln -s ecco.fq.gz temp.fq.gz
[% END -%]

[% IF ecphase == 2 -%]
# Error-correct phase 2
clumpify.sh \
    in=temp.fq.gz out=eccc.fq.gz \
    threads=[% opt.parallel %] \
    passes=4 ecc unpair repair overwrite
rm temp.fq.gz; ln -s eccc.fq.gz temp.fq.gz
[% END -%]

[% IF ecphase == 3 -%]
# Error-correct phase 3
# Low-depth reads can be discarded here with the "tossjunk", "tossdepth", or "tossuncorrectable" flags.
# For large genomes, tadpole and bbmerge (during the "Merge" phase) may need the flag 
# "prefilter=1" or "prefilter=2" to avoid running out of memory.
# "prefilter" makes these take twice as long though so don't use it if you have enough memory.
tadpole.sh \
    in=temp.fq.gz out=ecct.fq.gz \
    threads=[% opt.parallel %] \
[% IF opt.prefilter -%]
    prefilter=[% opt.prefilter %]  \
[% END -%]
    ecc tossjunk tossdepth=2 tossuncorrectable ordered overwrite
rm temp.fq.gz; ln -s ecct.fq.gz temp.fq.gz
[% END -%]

[% END -%]

# Read extension
tadpole.sh \
    in=temp.fq.gz out=extended.fq.gz \
    threads=[% opt.parallel %] \
[% IF opt.prefilter -%]
    prefilter=[% opt.prefilter %]  \
[% END -%]
    ordered mode=extend el=20 er=20 k=62 overwrite
rm temp.fq.gz; ln -s extended.fq.gz temp.fq.gz

# Read merging
bbmerge-auto.sh \
    in=temp.fq.gz out=merged.fq.gz outu=unmerged.raw.fq.gz \
    ihist=ihist.merge.txt \
    threads=[% opt.parallel %] \
[% IF opt.prefilter -%]
    prefilter=[% opt.prefilter %]  \
[% END -%]
    strict k=81 extend2=80 rem ordered prefilter=2 overwrite

# Quality-trim the unmerged reads.
bbduk.sh \
    in=unmerged.raw.fq.gz out=unmerged.fq.gz \
    threads=[% opt.parallel %] \
    qtrim=r trimq=[% opt.trimk %] minlen=[% opt.len %] ordered overwrite

exit 0
